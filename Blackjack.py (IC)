import random 

deck = ['2','3','4','5','6','7','8','9','10','J','Q','K','A']  #single deck of cards 
card_value = [2,3,4,5,6,7,8,9,10,10,10,10,[1,11]]  #used/referenced to get the value of the cards. 

eight_deck = []    #eight deck of cards for the house 


users_hand = [0,0]    #array will hold all user dealt cards 
houses_hand = [0,0]   #will hold the houses dealt cards 

i = 0  #iterator to create 8 deck of cards 
#while loop creates and 8 deck of card
while i < 8:
    copy_deck = deck  
    eight_deck.extend(copy_deck)
    i=i+1

#initial shuffle
random.shuffle(eight_deck)

#card counter keeps trap of card order in shuffled deck
card_counter = 0

#keeps track of the numerical value of the users hand 
user_hand_value = 0
user_hand_multi = []
multi_active = False 


#houses hand value
house_hand_value = 0
house_hand_multi = []
house_multi_active = False 

game_over = False

game_record = []

#def shuffle():
    
def nextCardInDeck():  #keeps track of next card to be dealt from the houses 8 deck
    global card_counter
    card_counter = card_counter+1
    
def initialDeal():    #initiates the handout of cards from the dealer  
    global users_hand
    global houses_hand
    global multi_active
    global house_multi_active
    global house_hand_multi
    global house_hand_value
    global user_hand_value
    global user_hand_multi

    #rest hand to zero incase previous hand was played 
    user_hand_multi = [0,0]
    house_hand_multi = [0,0]
    house_hand_value = 0
    user_hand_value = 0
    house_multi_active = False
    multi_active = False

    #new hand 
    users_hand[0] = eight_deck[card_counter]
    nextCardInDeck()
    
    houses_hand[0] = eight_deck[card_counter]
    nextCardInDeck()

    users_hand[1] = eight_deck[card_counter]
    nextCardInDeck()

    houses_hand[1] = eight_deck[card_counter]

    if(users_hand[0] == 'A' or users_hand[1] == 'A'):
        multi_active = True
        
    if(houses_hand[0] == 'A' or houses_hand[1] == 'A'):
        house_multi_active = True
        
        
    '''
    code to show user his hand and the first card of the deals hand with the second card faced down
    '''


def userDealOneCard():            #a user decision -hit
    global user_hand_value
    global user_hand_multi
    global multi_active 
    
    nextCardInDeck()
    
    hit = eight_deck[card_counter]
    
    #print hit
    print('HIT: ',hit)

    if(multi_active == False):
        if(hit == 'A'):

            temp1 = 1 + user_hand_value
            temp2 = 11 + user_hand_value

            if(temp1 == 21 or temp2 == 21):
                print('You got 21!')
                return True     #returns True is user hand is active, False if the user bust
        
            elif(temp1 > 21 or temp2 > 21):
                
                mult_active = False
                
                if(temp1 < 21):
                    user_hand_value = temp1
                    print(user_hand_value)
                    return True      
                
                if(temp2 < 21):
                    user_hand_value = temp2
                    print(user_hand_value)
                    return True

                return False
            else:
                multi_active = True
                user_hand_value = temp2
                user_hand_multi = [temp1,temp2]
                print(user_hand_multi)
                return True 
            
        else:
            
            hitIndex = deck.index(hit)
            user_hand_value = user_hand_value + card_value[hitIndex]
            print(user_hand_value)
            if (user_hand_value > 21):
                return False
            else:
                return True    

    else: #if(multi_active == True)
        if(hit == 'A'):
            multi_active = True
            user_hand_multi[0] = user_hand_multi[0] + 1
            user_hand_multi[1] = user_hand_multi[1] + 1
            user_hand_value = user_hand_multi[1]


            if(user_hand_multi[1] > 21):
                multi_active = False
                user_hand_value = user_hand_multi[1] + 1
            
                
        else:
            hitIndex = deck.index(hit)
            hit_value = card_value[hitIndex]
                
            temp1 = user_hand_multi[0]
            temp2 = user_hand_multi[1]
            
            if(temp1 + hit_value == 21 or temp2 + hit_value == 21):
                print('House just got 21!')
                user_hand_value = 21
                return True

            elif(temp2 + hit_value > 21):
                user_multi_active = False 
                user_hand_value = temp1 + hit_value
                
            elif(temp2 + hit_value < 21):
                user_multi_active = True
                user_hand_multi = [temp1 + hit_value ,temp2 + hit_value]
                user_hand_value = temp2 + hit_value
        

    if(multi_active == True):
        print("print112",user_hand_multi)
    else:
        print("print112: ", user_hand_value)
        

    
def quickEvaluate():
    if(user_hand_value <= 21):
        return False
    else:
        return True


def userDecision():
    userInput = int(input('Type 1 = Hit :  2 = Stay : 3 = Double : 4 = Surrender: ')) #decision prompt for the user 
    
    #hit 
    if(userInput == 1):
        userDealOneCard()
        didBreak = quickEvaluate() #checks if user's hand is above 21 
        if(didBreak == True):
            
            print('Over 21, try again!')
            return False  #returns false if user busts and true if user wins
        
        else:
            if(user_hand_value == 21):  #if user has 21 return True 
                return True
            else:
                userDecision()
                
    
    #stay
    elif(userInput == 2):
        print('user chooses to stay')
        return True 
        #do nothing 
    
    #double
    elif(userInput == 3):
        userDealOneCard()
        didBreak = quickEvaluate()
        if(didBreak == True):
            print('Over 21, try again!')
            return False  #returns false if user busts and true if user stays under 21
        else:
            return True
        
    #surrender
    elif(userInput == 4):
        #forfiet hand and lose half of wager
        print('user surrenders')
        return False

    return True
    
def housesDecision():
    global house_hand_value
    global house_multi_active 
    global house_hand_multi 

    while(house_hand_value < 17):
        #keep hitting until over 16 or bust
        nextCardInDeck()
        hit = eight_deck[card_counter]
        print("dealer's hit = ", hit)


        if(house_multi_active == False):
            if(hit == 'A'):
                #code
                
                temp1 = 1 + house_hand_value
                temp2 = 11 + house_hand_value

                if(temp1 == 21 or temp2 == 21):
                    
                    house_multi_hand = False
                    house_hand_value = 21 
                    print('House got 21!')
                    return True
                
                elif(temp2 > 21):
                    
                    house_mult_active = False 
                    house_hand_value = temp1
                    
                else:
                
                    house_multi_active = True
                    house_hand_value = temp1
                    house_hand_multi = [temp1,temp2]
                
            else:
                hitIndex = deck.index(hit)
                house_hand_value = house_hand_value + card_value[hitIndex]

        if(house_multi_active == True):
            if(hit == 'A'):
                house_multi_active = False
                house_hand_value = house_hand_multi[1] + 1
               
            else:
                hitIndex = deck.index(hit)
                hit_value = card_value[hitIndex]
                
                temp1 = house_hand_multi[0]
                temp2 = house_hand_multi[1]

                if(temp1 + hit_value == 21 or temp2 + hit_value == 21):
                    print('House just got 21!')
                    house_hand_value = 21 
                    return True

                if(temp2 + hit_value > 21):
                    house_multi_active = False 
                    house_hand_value = temp1 + hit_value
                elif(temp2 + hit_value < 21):
                    house_multi_active = True
                    house_hand_multi = [temp1 + hit_value ,temp2 + hit_value]
                    house_hand_value = temp1 + hit_value

        if(house_multi_active == False):
            print(house_hand_value)
        else:
            print(house_hand_multi)
                
    return False   

def houseCheckForBlackjack():
    global house_hand_value
    global house_multi_active 
    global house_hand_multi

    
    card_one = houses_hand[0]   #user card one
    card_two = houses_hand[1]   #user card two
    card_one_index = deck.index(card_one)
    card_two_index = deck.index(card_two)

    #will return true if house obtains black jack, and false otherwise 
    if(card_one == 'A' and card_two == 'A'):
        house_multi_active = True
        house_hand_multi = [2,12]
        return False

    if(card_one == 'A'):
        if(card_two_index > 7):
            house_hand_value = 21
            print("House has blackjack3! You lose!")
            return True
        else:
            return False
        
    if(card_two == 'A'):
        if(card_one_index > 7):
            house_hand_value = 21
            print("House has blackjack4! You lose!")
            return True
        else:
            return False

    house_hand_value = card_value[card_one_index] + card_value[card_two_index]
        
def iniitialEvaluateHouse():
    global houses_hand
    global house_hand_multi
    global house_hand_value
    
    if (houses_hand[0] == 'A' and houses_hand[1] == 'A'):
        house_hand_multi = [2,12]
        house_hand_value = 12
        return 0
    
    elif (houses_hand[0] == 'A'):
        card_two = houses_hand[1]   #house card two
        card_two_index = deck.index(card_two)

        temp1 = 1 + card_value[card_two_index]
        temp2 = 11 + card_value[card_two_index]

        house_hand_multi = [temp1,temp2]
        house_hand_value = temp2
        return 0
    
    elif (houses_hand[1] == 'A'):
        card_one = houses_hand[0]      #house card one
        card_one_index = deck.index(card_one)
        
        temp1 = 1 + card_value[card_one_index]
        temp2 = 11 + card_value[card_one_index]

        house_hand_multi = [temp1,temp2]
        house_hand_value = temp2
        return 0
    else:
        card_one = houses_hand[0]      #house card one
        card_one_index = deck.index(card_one)
        card_two = houses_hand[1]   #house card two
        card_two_index = deck.index(card_two)
        house_hand_value = card_value[card_one_index] + card_value[card_two_index]
        

def initialEvaluateUser():
    global user_hand_value
    global user_hand_multi
    global house_hand_value
    global multi_active
    

    
    
    
    card_one = users_hand[0]      #user card one
    card_one_index = deck.index(card_one)
    card_two = users_hand[1]   #user card two
    card_two_index = deck.index(card_two)


    #if card 1 is an Ace and checks if card 2 is 
    if (card_one == 'A'):
        multi_active = True
        if(card_two == 'A'):
            user_hand_multi = [2,12]
            user_hand_value = 12
        else:
            if(card_value[card_two_index] > 9):  #checks if a card of value of 10 is paired with an Ace 
                print('blackjack_1')
                user_hand_value = 21
                return True             #returns true is blackjack is obtained 
            else:
                temp1 = 1 + card_value[card_two_index]   #values of an Ace can be either 1 or 11
                temp2 = 11 + card_value[card_two_index]  
                user_hand_multi = [temp1,temp2]
                user_hand_value = temp2

    #if card one is not an Ace, checks is card 2 is 
    elif (card_two == 'A'):
        multi_active = True
        if(card_value[card_one_index] > 9): #if card one is a 10 then user gets blackjack
            print('blackjack_2')
            user_hand_value = 21
            return True         #returns True if blackjack is obtained. 
        else:
            temp1 = 1 + card_value[card_one_index]   #values of an Ace can be either 1 or 11
            temp2 = 11 + card_value[card_one_index]
            user_hand_multi = [temp1,temp2]
            user_hand_value = temp2
            
    #If niether card is an Ace
    else:
        user_hand_value = card_value[card_one_index] + card_value[card_two_index]
    #print 
    if (multi_active == True):
        print(user_hand_multi)

    else:
        print(user_hand_value)

    iniitialEvaluateHouse()       #initiates house evaluation and house hand 

    return False
        
def playOneHand():
    global game_record

    initialDeal()

    print("house1 = " + houses_hand[0])
    print('users hand: ', users_hand )

    if(houseCheckForBlackjack() == True):   #returns True if the house's intial dealt hand is a blackjack
        print("house1= ", houses_hand[0])
        print("house2= ", houses_hand[1])
        print('House Wins, House Blackjack')
        game_record.append('L')
    else:
            userHasBlackjack = initialEvaluateUser()

            if (userHasBlackjack == True ):
                print('You won! 21! (blackjack)')
                game_record.append('W')

            else:
                user_decision = userDecision()
                if(user_decision == True):   #if userDecision is True (then hand is active) if False (the user bust)
                        print("house1= ", houses_hand[0])
                        print("house2= ", houses_hand[1])
                        h_decision = housesDecision()
                        print('USER HAND: ', user_hand_value)
                        print('HOUSE HAND: ', house_hand_value)
                    
                        if(house_hand_value < 22 and house_hand_value > user_hand_value and user_hand_value < 22):
                            print('You lose, try again (house > player)')
                            game_record.append('L')
                        elif(house_hand_value < 22 and user_hand_value > 21):
                            print('You lose, try again (user over 21)')
                            game_record.append('L')
                        elif (house_hand_value == user_hand_value):
                            print ('You Push')
                            game_record.append('P')
                        else:
                            print('You win! Play again! (win off decision)')
                            game_record.append('W')
                else:  #executes if users hand busts
                  print('You lose, Try again!')
                  game_record.append('L')

def userInput():
    user_input = input("Do you want to play again? '1' for Yes' or '2' for No ")  

    if(user_input == "2"):
        print(game_record)
        print('Leaving seat')
        return False
    elif(user_input == "1"):
        print('Yes was chosen')
        return True
    else:
        print('Unknown input')
        userInput()


def driver():
    global game_over

    if(game_over == False):

        playOneHand()
        
        if(userInput() == True):
            game_over == True
            driver()
        else:
           game_over == False            

    
###################################
driver()        #initiates driver method
###################################




'''
Notes:
work on visual display
work on error handling
work on logic when to shuffle deck
add wage system


'''
