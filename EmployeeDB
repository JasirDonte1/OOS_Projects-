#START DATE 4/22/21

#extract person data from a text file into individual Person objects
#ability to edit Person objects
#print person objects

import csv 


class Person:


    def __init__(self, employeeID, prefix, first_name, middle_initial, last_name, gender, email, father_name, mother_name, mother_maiden, dob, tob, age_years,
                 weight_kg, join_date, join_quarter, join_half, join_month_no, join_month_name, short_month, join_day, join_dow, short_dow, age_in_company, salary,
                 last_hike, ssn, phone, place_name, county, city, state, zipcode, region, username, password):
        
        self.employeeID = employeeID
        self.prefix = prefix
        self.first_name = first_name
        self.middle_initial = middle_initial
        self.last_name = last_name 
        self.gender = gender
        self.email = email
        self.father_name = father_name 
        self.mother_name = mother_name 
        self.mother_maiden = mother_maiden 
        self.dob = dob            #date of birth
        self.tob = tob          #time of birth 
        self.age_years = age_years   #age in years 
        self.weight_kg = weight_kg
        self.join_date = join_date
        self.join_quarter = join_quarter 
        self.join_half = join_half
        self.join_month_no = join_month_no
        self.join_month_name = join_month_name 
        self.short_month = short_month
        self.join_day = join_day
        self.join_dow = join_dow
        self.short_dow = short_dow 
        self.age_in_company = age_in_company
        self.salary = salary
        self.last_hike = last_hike
        self.ssn = ssn
        self.phone = phone 
        self.place_name = place_name 
        self.county = county 
        self.city = city 
        self.state = state
        self.zipcode = zipcode 
        self.region = region 
        self.username = username 
        self.password = password

        self.weight_lbs = str(float(weight_kg) * 2.205) #convert weight kg to lbs
        self.full_name = first_name + ' ' + last_name

    menu_no = 0

    #operator overloading  >   
    def __gt__(self, other):
        if(self.last_name>other.last_name):
            return True
        else:
            return False
        
        
    def BasicDisplay(self):
        print('Name: ', self.first_name, self.last_name, '\nEmployeeID: ', self.
              employeeID)
        print('Gender: ', self.gender)
        print('DOB: ', self.dob)
        print('Phone: ', self.phone, '   Email: ', self.email)

    def DisplayAll(self):
        pass

    def ChangeEmployeeID(self):
        print('Current Employee ID: ', self.employeeID)
        updated_id = input('Enter new Employee ID: ')
        self.employeeID = updated_id
        print('__Employee ID Updated__')

    def ChangeName(self):
        name = self.last_name + ', ' + self.first_name + ' ' + self.middle_initial
        print('Current Name: ', name)
        updated_first_name = input('Enter first name: ')
        self.first_name = updated_first_name
        updated_middle_initial = input('Enter middle initial: ')
        self.middle_initial = updated_middle_initial
        updated_last_name = input('Enter last name: ')
        self.last_name = updated_last_name
        name = self.last_name + ', ' + self.first_name + ' ' + self.middle_initial + '.'
        print('__Name Updated__ (',name,')')

    def ChangeGender(self):
        print('Listed Gender: ', self.gender)
        user_input = input('Enter new gender initial: ')
        self.gender = user_input
        print('__Gender Updated__ (',self.gender,')')
        
    def ChangeEmail(self):
        print('Current Employee Email: ', self.email)
        user_input = input('Enter new email: ')
        if '@' in user_input:  #check is string contains @ symbol
            if user_input.endswith('.com') or user_input.endswith('.org') or user_input.endswith('.net'): #check if string ends in a .com .org or .net
                self.email = user_input
                print('...email is valid \n__Email Updated__ (', self.email,')' )
            else:
                print('Email not recognized')
        else:
            print('Email not recognized')
             
    def ChangeParentInfo(self):
        print('Fathers Name: ', self.father_name, '\nMothers Name', self.mother_name, '\nMothers Maiden Name: ', self.mother_maiden)

        user_input1 = int(input('What field do you want to change? \n1. Fathers Name \n2. Mothers Name \n3. Mothers Maiden Name \n'))

        if user_input1 == 1:  #Fathers name 
            print('Current Name Listed: ', self.father_name)
            user_input2 = input('Enter new Fathers Name ')
            self.father_name = user_input2
            print('__Fathers Name Updated__ (', self.father_name,')')
            
        elif user_input1 == 2: #Mothers Name
            print('Current Name Listed: ', self.mother_name)
            user_input2 = input('Enter new Mothers Name ')
            self.mother_name = user_input2
            print('__Mothers Name Updated__ (', self.mother_name,')')

            
        elif user_input1 == 3: #Mothers Maiden Name 
            print('Current Name Listed: ', self.mother_maiden)
            user_input2 = input('Enter new Mothers Maiden Name ')
            self.mother_maiden = user_input2
            print('__Mothers Maiden Name Updated__ (', self.mother_maiden,')')
        
        else:
            print('command not recognized')
        
    def ChangeDOB(self):
        print('DOB Listed: ', self.dob, '\nTOB Listed: ', self.tob)
        self.dob = input('Enter Employeee new DOB (dd/mm/yyyy): ')
        self.tob = input('Enter Employeee new TOB (hh:mm:ss): ')
        print('__DOB and TOB Updated__ (DOB:',self.dob,' TOB:', self.tob,')')
        
    def ChangeAgeInYears(self): #adjust to update automatically and write back to file daily
        print('Current Age (in years)', self.age_years)
        self.age_years = input('Enter new Age in Years: ')
        print('__Age (in years) Updated__(', self.age_years,')')
        
    def ChangeWeight(self): 
        print('Current Weight ( kg: ',self.weight_kg, ' lbs:', self.weight_lbs,')')
        self.weight_kg = input('Enter in new weight (kg) ')
        self.weight_lbs = str(float(self.weight_kg) * 2.205)
        print('__Weight Updated__ ( kg: ', self.weight_kg,'lbs: ', "{:.2f}".format(float(self.weight_lbs)),')')
        
    def ChangeSalary(self):
        print('Current Salary: ', self.salary)
        self.salary = input('Enter new employee salary ($dd.cc): ')
        print('__Salary Updated__ (', self.salary, ')')

        
    def ChangePhoneNumber(self): #adjust have user to be able to enter input without '-' and format it before finishing update 
        print('Current Phone Number: ', self.phone)
        phone = input('Enter new phone number (########## or ###-###-####): ')
        phone.replace('-','')
        self.phone = phone[:3] + '-' + phone[3:6] + '-' + phone[6:]   #reformating phone number for string 
        print('__Phone Number Updated__ (', self.phone, ')')

    def ChangeLocation(self):   
        pass
        
    def ChangeUsername(self): 
        print('Current username: ', self.username)
        self.username = input('Enter new username: ')
        print('__Username Updated__ (', self.username,')')
        
    
    def ChangePassword(self): #update to check if password has been used before, and giver password parameters 
        self.password = input('Enter new password: ')
        print('__Password Updated__')

    def PrintEmployeeData(self):
        print('Name: ', self.prefix ,self.full_name, '   DOB:', self.dob, '  TOB:', self.tob)
        print('EmployeeID: ', self.employeeID)
        print('Gender: ', self.gender)
        print('Email: ', self.email)
        print('Phone: ', self.phone)
        print('Weight (kg): ', self.weight_kg, '   Weight (lbs)', self.weight_lbs)
        print('Join Date: ', self.join_date)
        print('Salary: ', self.salary)
        print('SSN: ', self.ssn)   #only shows the last 4 digits 
        print('Location: ', self.city,',', self.state,)
        print('Username: ', self.username)
        print('Password: ', self.password)
        

        
    def EditPerson(self):
        print ('Enter the number or name of the field to edit')
        DisplayEditMenu()
        user_input = int(input())

        if user_input == 1:
            self.ChangeEmployeeID()

        elif user_input == 2:
            self.ChangeName()

        elif user_input == 3:
            self.ChangeGender()

        elif user_input == 4:
            self.ChangeEmail()
            
        elif user_input == 5:
            self.ChangeParentInfo()

        elif user_input == 6:
            self.ChangeDOB()

        elif user_input == 7:
            self.ChangeAgeInYears()

        elif user_input == 8:
            self.ChangeWeight()
            
        elif user_input == 9:
            self.ChangeSalary()
            
        elif user_input == 10:
            self.ChangePhoneNumber()
            
        elif user_input == 11:
            self.ChangeLocation()
            
        elif user_input == 12:
            self.ChangeUsername()
            
        elif user_input == 13:
            self.ChangePassword()
        
        else:
            print('Command not recognized')
            

#######functions#######
def DisplayEditMenu():

    edit_menu = ['Change Employee ID', 'Change Name', 'Change Gender', 'Change Email', 'Change Parental Information', 'Change Date and Time of Birth',
                 'Change Age (in years)', 'Change Weight', 'Change Salary', 'Change Phone Number', 'Change Address', 'Change Username', 'Change Password']
    ctr = 1

    for x in edit_menu:
        string = str(ctr) + '. ' + x
        print(string)
        ctr+=1
    
        
def NamesInList(employee):
    t = []
    for x in employee:
        full_name = x.first_name +' '+ x.last_name
        t.append(full_name)
    t.sort()    #sorts employee data by first name
    return t


def EmployeeIDList(employee):
    employee.sort()    #sorts data by last name 
    t = []
    for x in employee:
        i = x.employeeID + " : " + x.first_name + ' ' + x.last_name
        t.append(i)
    return t    


def ListBasicEmployeeData(employee):
    employee.sort()         #sorts employee data by last name 
    for x in employee[:5]: #HARD PROGRAMMED TO SHOW ONLY FIRST 5 EMPLOYEES SORTED BY LAST NAME 
        x.BasicDisplay()
        print('\n')
    

def LoadEmployeeCSV(filename):
    global employee, fields

    data = []  #data[] temporarily holds 1 rows worth of data when extracted from file 

    # reading csv file
    with open(filename, 'r') as csvfile:
        # creating a csv reader object
        csvreader = csv.reader(csvfile)
          
        # extracting field names through first row
        fields = next(csvreader)
      
        # extracting each data row one by one
        for row in csvreader:
            
            data.append(row)   #raw data 
            
            #temp. holds a Person() type from file 
            new_employee = Person(data[0][0], data[0][1], data[0][2], data[0][3], data[0][4], data[0][5], data[0][6], data[0][7], data[0][8], data[0][8], data[0][10], data[0][11],
                                        data[0][12], data[0][13], data[0][14], data[0][15], data[0][16], data[0][17], data[0][18], data[0][19], data[0][20], data[0][21], data[0][22],
                                        data[0][23], data[0][24], data[0][25], data[0][26], data[0][27], data[0][28], data[0][29], data[0][30], data[0][31], data[0][32], data[0][33],
                                        data[0][34],data[0][35])
        
            
            employee.append(new_employee) #appends each Person type to global variable employee[]

            data = [] #resets row 0 for next extraction
            
def FindEmployee(employee):
    
    employee_data = []
    found = False
    ctr = 1


    user_input = input("Search Employee List \nEnter Employee's last name: ")

    for x in employee:
        if user_input == x.last_name:
            employee_data.append(x)
            
    if len(employee_data) > 1:
        
        for x in employee_data:
            string = str(ctr) + '. ' + x.full_name
            x.menu_no = ctr
            print(string)
            ctr+=1
            
        user_input = int(input('\nSelect Employee: '))

        for x in employee_data:
            if user_input == x.menu_no:
                return x
            
        if found == False:
            print('Input not recognized (1)')
        
    elif len(employee_data) == 1:
        return employee_data[0]

    else:
        print('Input not recognized (2)')
    
def Menu(employee):
    global active
    print('\n')
    #menu name titles 
    menu = ['Show Basic List of Employees','Show Employee ID List', 'Show Employee Information', 'Edit Employee Data']

    #menu number 
    ctr = 1

    #print menu
    for x in menu:
        string = str(ctr) + '. ' + x
        print(string)
        ctr+=1
    print('Enter -1 to exit program')

    user_input = int(input('\nChoose action from menu above: '))
    print('\n')

    #menu options 
    if user_input == 1:
        ListBasicEmployeeData(employee)
        
    elif user_input == 2:
        employee_ID_List = EmployeeIDList(employee)
        for x in employee_ID_List[:10]:              #HARD CODED TO SHOW DATA FOR 10 EMPLOYEES 
            print(x)
            
    elif user_input == 3:
        employee_data = FindEmployee(employee)
        employee_data.PrintEmployeeData()
        
            
    elif user_input == 4:
        #edit employee data
        employee_data = FindEmployee(employee)
        employee_data.EditPerson()
        
    
    elif user_input == -1:   # -1 to exit program 
        active = False
        
    else:
        print('Command not recognized')



            
###### main driver ##########

employee = []
fields = []
filename = "/Users/JasirDonte/Downloads/employee_data.csv"
LoadEmployeeCSV(filename) #load data from files into employee[]
active = True
while active == True:
    Menu(employee)

############################
